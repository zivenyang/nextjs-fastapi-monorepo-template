// This file is auto-generated by @hey-api/openapi-ts

import {
  type Options as ClientOptions,
  type TDataShape,
  type Client,
  urlSearchParamsBodySerializer,
} from "@hey-api/client-next";
import type {
  LoginAccessTokenData,
  LoginAccessTokenResponse,
  LoginAccessTokenError,
  LogoutData,
  LogoutError,
  RegisterUserData,
  RegisterUserResponse,
  RegisterUserError,
  ReadUsersData,
  ReadUsersResponse,
  ReadUsersError,
  ReadUserMeData,
  ReadUserMeResponse,
  UpdateUserMeData,
  UpdateUserMeResponse,
  UpdateUserMeError,
  ReadUserData,
  ReadUserResponse,
  ReadUserError,
} from "./types.gen";
import { client as _heyApiClient } from "./client.gen";

export type Options<
  TData extends TDataShape = TDataShape,
  ThrowOnError extends boolean = boolean,
> = ClientOptions<TData, ThrowOnError> & {
  /**
   * You can provide a client instance returned by `createClient()` instead of
   * individual options. This might be also useful if you want to implement a
   * custom client.
   */
  client?: Client;
  /**
   * You can pass arbitrary values through the `meta` object. This can be
   * used to access values that aren't defined as part of the SDK function.
   */
  meta?: Record<string, unknown>;
};

/**
 * Login Access Token
 * OAuth2 密码流认证，获取JWT token
 */
export const loginAccessToken = <ThrowOnError extends boolean = false>(
  options: Options<LoginAccessTokenData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    LoginAccessTokenResponse,
    LoginAccessTokenError,
    ThrowOnError
  >({
    ...urlSearchParamsBodySerializer,
    url: "/api/v1/auth/login",
    ...options,
    headers: {
      "Content-Type": "application/x-www-form-urlencoded",
      ...options?.headers,
    },
  });
};

/**
 * Logout
 * 用户登出，将当前令牌加入黑名单
 */
export const logout = <ThrowOnError extends boolean = false>(
  options: Options<LogoutData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    unknown,
    LogoutError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/auth/logout",
    ...options,
  });
};

/**
 * Register User
 * 注册新用户
 */
export const registerUser = <ThrowOnError extends boolean = false>(
  options: Options<RegisterUserData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    RegisterUserResponse,
    RegisterUserError,
    ThrowOnError
  >({
    url: "/api/v1/auth/register",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Read Users
 * 获取用户列表。
 */
export const readUsers = <ThrowOnError extends boolean = false>(
  options?: Options<ReadUsersData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    ReadUsersResponse,
    ReadUsersError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/users/",
    ...options,
  });
};

/**
 * Read User Me
 * 获取当前用户信息。
 */
export const readUserMe = <ThrowOnError extends boolean = false>(
  options?: Options<ReadUserMeData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    ReadUserMeResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/users/me",
    ...options,
  });
};

/**
 * Update User Me
 * 更新当前用户信息。
 */
export const updateUserMe = <ThrowOnError extends boolean = false>(
  options: Options<UpdateUserMeData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).patch<
    UpdateUserMeResponse,
    UpdateUserMeError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/users/me",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Read User
 * 根据ID获取用户。
 */
export const readUser = <ThrowOnError extends boolean = false>(
  options: Options<ReadUserData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    ReadUserResponse,
    ReadUserError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/users/{user_id}",
    ...options,
  });
};
